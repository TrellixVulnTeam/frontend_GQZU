import { ChangeDetectionStrategy, Component, ContentChildren, ElementRef, Inject, Input, ViewChild } from '@angular/core';
import { BehaviorSubject, iif, merge, NEVER, Subject } from 'rxjs';
import { exhaustMap, filter, map, startWith, switchMap, take, takeUntil } from 'rxjs/operators';
import { ktdMouseOrTouchDown, ktdMouseOrTouchEnd, ktdPointerClient } from '../utils/pointer.utils';
import { GRID_ITEM_GET_RENDER_DATA_TOKEN } from '../grid.definitions';
import { KTD_GRID_DRAG_HANDLE } from '../directives/drag-handle';
import { KTD_GRID_RESIZE_HANDLE } from '../directives/resize-handle';
import { ktdOutsideZone } from '../utils/operators';
import { coerceBooleanProperty } from '../coercion/boolean-property';
import { coerceNumberProperty } from '../coercion/number-property';
import * as i0 from "@angular/core";
import * as i1 from "../grid.service";
export class KtdGridItemComponent {
    constructor(elementRef, gridService, renderer, ngZone, getItemRenderData) {
        this.elementRef = elementRef;
        this.gridService = gridService;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.getItemRenderData = getItemRenderData;
        /** CSS transition style. Note that for more performance is preferable only make transition on transform property. */
        this.transition = 'transform 500ms ease, width 500ms ease, height 500ms ease';
        this._dragStartThreshold = 0;
        this._draggable = true;
        this._draggable$ = new BehaviorSubject(this._draggable);
        this._resizable = true;
        this._resizable$ = new BehaviorSubject(this._resizable);
        this.dragStartSubject = new Subject();
        this.resizeStartSubject = new Subject();
        this.subscriptions = [];
        this.dragStart$ = this.dragStartSubject.asObservable();
        this.resizeStart$ = this.resizeStartSubject.asObservable();
    }
    /** Id of the grid item. This property is strictly compulsory. */
    get id() {
        return this._id;
    }
    set id(val) {
        this._id = val;
    }
    /** Minimum amount of pixels that the user should move before it starts the drag sequence. */
    get dragStartThreshold() { return this._dragStartThreshold; }
    set dragStartThreshold(val) {
        this._dragStartThreshold = coerceNumberProperty(val);
    }
    /** Whether the item is draggable or not. Defaults to true. */
    get draggable() {
        return this._draggable;
    }
    set draggable(val) {
        this._draggable = coerceBooleanProperty(val);
        this._draggable$.next(this._draggable);
    }
    /** Whether the item is resizable or not. Defaults to true. */
    get resizable() {
        return this._resizable;
    }
    set resizable(val) {
        this._resizable = coerceBooleanProperty(val);
        this._resizable$.next(this._resizable);
    }
    ngOnInit() {
        const gridItemRenderData = this.getItemRenderData(this.id);
        this.setStyles(gridItemRenderData);
    }
    ngAfterContentInit() {
        this.subscriptions.push(this._dragStart$().subscribe(this.dragStartSubject), this._resizeStart$().subscribe(this.resizeStartSubject));
    }
    ngOnDestroy() {
        this.subscriptions.forEach(sub => sub.unsubscribe());
    }
    setStyles({ top, left, width, height }) {
        // transform is 6x times faster than top/left
        this.renderer.setStyle(this.elementRef.nativeElement, 'transform', `translateX(${left}) translateY(${top})`);
        this.renderer.setStyle(this.elementRef.nativeElement, 'display', `block`);
        this.renderer.setStyle(this.elementRef.nativeElement, 'transition', this.transition);
        if (width != null) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', width);
        }
        if (height != null) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'height', height);
        }
    }
    _dragStart$() {
        return this._draggable$.pipe(switchMap((draggable) => {
            if (!draggable) {
                return NEVER;
            }
            else {
                return this._dragHandles.changes.pipe(startWith(this._dragHandles), switchMap((dragHandles) => {
                    return iif(() => dragHandles.length > 0, merge(...dragHandles.toArray().map(dragHandle => ktdMouseOrTouchDown(dragHandle.element.nativeElement, 1))), ktdMouseOrTouchDown(this.elementRef.nativeElement, 1)).pipe(exhaustMap((startEvent) => {
                        // If the event started from an element with the native HTML drag&drop, it'll interfere
                        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action
                        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but
                        // it's flaky and it fails if the user drags it away quickly. Also note that we only want
                        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`
                        // events from firing on touch devices.
                        if (startEvent.target && startEvent.target.draggable && startEvent.type === 'mousedown') {
                            startEvent.preventDefault();
                        }
                        const startPointer = ktdPointerClient(startEvent);
                        return this.gridService.mouseOrTouchMove$(document).pipe(takeUntil(ktdMouseOrTouchEnd(document, 1)), ktdOutsideZone(this.ngZone), filter((moveEvent) => {
                            moveEvent.preventDefault();
                            const movePointer = ktdPointerClient(moveEvent);
                            const distanceX = Math.abs(startPointer.clientX - movePointer.clientX);
                            const distanceY = Math.abs(startPointer.clientY - movePointer.clientY);
                            // When this conditions returns true mean that we are over threshold.
                            return distanceX + distanceY >= this.dragStartThreshold;
                        }), take(1), 
                        // Return the original start event
                        map(() => startEvent));
                    }));
                }));
            }
        }));
    }
    _resizeStart$() {
        return this._resizable$.pipe(switchMap((resizable) => {
            if (!resizable) {
                // Side effect to hide the resizeElem if resize is disabled.
                this.renderer.setStyle(this.resizeElem.nativeElement, 'display', 'none');
                return NEVER;
            }
            else {
                return this._resizeHandles.changes.pipe(startWith(this._resizeHandles), switchMap((resizeHandles) => {
                    if (resizeHandles.length > 0) {
                        // Side effect to hide the resizeElem if there are resize handles.
                        this.renderer.setStyle(this.resizeElem.nativeElement, 'display', 'none');
                        return merge(...resizeHandles.toArray().map(resizeHandle => ktdMouseOrTouchDown(resizeHandle.element.nativeElement, 1)));
                    }
                    else {
                        this.renderer.setStyle(this.resizeElem.nativeElement, 'display', 'block');
                        return ktdMouseOrTouchDown(this.resizeElem.nativeElement, 1);
                    }
                }));
            }
        }));
    }
}
KtdGridItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: KtdGridItemComponent, deps: [{ token: i0.ElementRef }, { token: i1.KtdGridService }, { token: i0.Renderer2 }, { token: i0.NgZone }, { token: GRID_ITEM_GET_RENDER_DATA_TOKEN }], target: i0.ɵɵFactoryTarget.Component });
KtdGridItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: KtdGridItemComponent, selector: "ktd-grid-item", inputs: { minW: "minW", minH: "minH", maxW: "maxW", maxH: "maxH", transition: "transition", id: "id", dragStartThreshold: "dragStartThreshold", draggable: "draggable", resizable: "resizable" }, queries: [{ propertyName: "_dragHandles", predicate: KTD_GRID_DRAG_HANDLE, descendants: true }, { propertyName: "_resizeHandles", predicate: KTD_GRID_RESIZE_HANDLE, descendants: true }], viewQueries: [{ propertyName: "resizeElem", first: true, predicate: ["resizeElem"], descendants: true, read: ElementRef, static: true }], ngImport: i0, template: "<ng-content></ng-content>\r\n<div #resizeElem class=\"grid-item-resize-icon\"></div>\r\n", styles: [":host{display:none;position:absolute;z-index:1;overflow:hidden}:host div{position:absolute;-webkit-user-select:none;user-select:none;z-index:10}:host div.grid-item-resize-icon{cursor:se-resize;width:20px;height:20px;bottom:0;right:0;color:inherit}:host div.grid-item-resize-icon:after{content:\"\";position:absolute;right:3px;bottom:3px;width:5px;height:5px;border-right:2px solid;border-bottom:2px solid}.display-none{display:none!important}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: KtdGridItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ktd-grid-item',
                    templateUrl: './grid-item.component.html',
                    styleUrls: ['./grid-item.component.scss'],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.KtdGridService }, { type: i0.Renderer2 }, { type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [GRID_ITEM_GET_RENDER_DATA_TOKEN]
                }] }]; }, propDecorators: { _dragHandles: [{
                type: ContentChildren,
                args: [KTD_GRID_DRAG_HANDLE, { descendants: true }]
            }], _resizeHandles: [{
                type: ContentChildren,
                args: [KTD_GRID_RESIZE_HANDLE, { descendants: true }]
            }], resizeElem: [{
                type: ViewChild,
                args: ['resizeElem', { static: true, read: ElementRef }]
            }], minW: [{
                type: Input
            }], minH: [{
                type: Input
            }], maxW: [{
                type: Input
            }], maxH: [{
                type: Input
            }], transition: [{
                type: Input
            }], id: [{
                type: Input
            }], dragStartThreshold: [{
                type: Input
            }], draggable: [{
                type: Input
            }], resizable: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItZ3JpZC1sYXlvdXQvc3JjL2xpYi9ncmlkLWl0ZW0vZ3JpZC1pdGVtLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItZ3JpZC1sYXlvdXQvc3JjL2xpYi9ncmlkLWl0ZW0vZ3JpZC1pdGVtLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDZSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUNoRyxTQUFTLEVBQ1osTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGVBQWUsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBYyxPQUFPLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBQzdGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNuRyxPQUFPLEVBQUUsK0JBQStCLEVBQWtDLE1BQU0scUJBQXFCLENBQUM7QUFDdEcsT0FBTyxFQUFFLG9CQUFvQixFQUFxQixNQUFNLDJCQUEyQixDQUFDO0FBQ3BGLE9BQU8sRUFBRSxzQkFBc0IsRUFBdUIsTUFBTSw2QkFBNkIsQ0FBQztBQUUxRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFnQixxQkFBcUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ25GLE9BQU8sRUFBRSxvQkFBb0IsRUFBZSxNQUFNLDZCQUE2QixDQUFD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QVU7c0JBQXBFLFNBQVM7dUJBQUMsWUFBWSxFQUFFLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFDO2dCQUdoRCxJQUFJO3NCQUFaLEtBQUs7Z0JBQ0csSUFBSTtzQkFBWixLQUFLO2dCQUNHLElBQUk7c0JBQVosS0FBSztnQkFDRyxJQUFJO3NCQUFaLEtBQUs7Z0JBR0csVUFBVTtzQkFBbEIsS0FBSztnQkFPRixFQUFFO3NCQURMLEtBQUs7Z0JBYUYsa0JBQWtCO3NCQURyQixLQUFLO2dCQVlGLFNBQVM7c0JBRFosS0FBSztnQkFlRixTQUFTO3NCQURaLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgQWZ0ZXJDb250ZW50SW5pdCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgQ29udGVudENoaWxkcmVuLCBFbGVtZW50UmVmLCBJbmplY3QsIElucHV0LCBOZ1pvbmUsIE9uRGVzdHJveSwgT25Jbml0LCBRdWVyeUxpc3QsIFJlbmRlcmVyMixcclxuICAgIFZpZXdDaGlsZFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIGlpZiwgbWVyZ2UsIE5FVkVSLCBPYnNlcnZhYmxlLCBTdWJqZWN0LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZXhoYXVzdE1hcCwgZmlsdGVyLCBtYXAsIHN0YXJ0V2l0aCwgc3dpdGNoTWFwLCB0YWtlLCB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IGt0ZE1vdXNlT3JUb3VjaERvd24sIGt0ZE1vdXNlT3JUb3VjaEVuZCwga3RkUG9pbnRlckNsaWVudCB9IGZyb20gJy4uL3V0aWxzL3BvaW50ZXIudXRpbHMnO1xyXG5pbXBvcnQgeyBHUklEX0lURU1fR0VUX1JFTkRFUl9EQVRBX1RPS0VOLCBLdGRHcmlkSXRlbVJlbmRlckRhdGFUb2tlblR5cGUgfSBmcm9tICcuLi9ncmlkLmRlZmluaXRpb25zJztcclxuaW1wb3J0IHsgS1REX0dSSURfRFJBR19IQU5ETEUsIEt0ZEdyaWREcmFnSGFuZGxlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy9kcmFnLWhhbmRsZSc7XHJcbmltcG9ydCB7IEtURF9HUklEX1JFU0laRV9IQU5ETEUsIEt0ZEdyaWRSZXNpemVIYW5kbGUgfSBmcm9tICcuLi9kaXJlY3RpdmVzL3Jlc2l6ZS1oYW5kbGUnO1xyXG5pbXBvcnQgeyBLdGRHcmlkU2VydmljZSB9IGZyb20gJy4uL2dyaWQuc2VydmljZSc7XHJcbmltcG9ydCB7IGt0ZE91dHNpZGVab25lIH0gZnJvbSAnLi4vdXRpbHMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgQm9vbGVhbklucHV0LCBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICcuLi9jb2VyY2lvbi9ib29sZWFuLXByb3BlcnR5JztcclxuaW1wb3J0IHsgY29lcmNlTnVtYmVyUHJvcGVydHksIE51bWJlcklucHV0IH0gZnJvbSAnLi4vY29lcmNpb24vbnVtYmVyLXByb3BlcnR5JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdrdGQtZ3JpZC1pdGVtJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9ncmlkLWl0ZW0uY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgc3R5bGVVcmxzOiBbJy4vZ3JpZC1pdGVtLmNvbXBvbmVudC5zY3NzJ10sXHJcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxyXG59KVxyXG5leHBvcnQgY2xhc3MgS3RkR3JpZEl0ZW1Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgQWZ0ZXJDb250ZW50SW5pdCB7XHJcbiAgICAvKiogRWxlbWVudHMgdGhhdCBjYW4gYmUgdXNlZCB0byBkcmFnIHRoZSBncmlkIGl0ZW0uICovXHJcbiAgICBAQ29udGVudENoaWxkcmVuKEtURF9HUklEX0RSQUdfSEFORExFLCB7ZGVzY2VuZGFudHM6IHRydWV9KSBfZHJhZ0hhbmRsZXM6IFF1ZXJ5TGlzdDxLdGRHcmlkRHJhZ0hhbmRsZT47XHJcbiAgICBAQ29udGVudENoaWxkcmVuKEtURF9HUklEX1JFU0laRV9IQU5ETEUsIHtkZXNjZW5kYW50czogdHJ1ZX0pIF9yZXNpemVIYW5kbGVzOiBRdWVyeUxpc3Q8S3RkR3JpZFJlc2l6ZUhhbmRsZT47XHJcbiAgICBAVmlld0NoaWxkKCdyZXNpemVFbGVtJywge3N0YXRpYzogdHJ1ZSwgcmVhZDogRWxlbWVudFJlZn0pIHJlc2l6ZUVsZW06IEVsZW1lbnRSZWY7XHJcblxyXG4gICAgLyoqIE1pbiBhbmQgbWF4IHNpemUgaW5wdXQgcHJvcGVydGllcy4gQW55IG9mIHRoZXNlIHdvdWxkICdvdmVycmlkZScgdGhlIG1pbi9tYXggdmFsdWVzIHNwZWNpZmllZCBpbiB0aGUgbGF5b3V0LiAqL1xyXG4gICAgQElucHV0KCkgbWluVz86IG51bWJlcjtcclxuICAgIEBJbnB1dCgpIG1pbkg/OiBudW1iZXI7XHJcbiAgICBASW5wdXQoKSBtYXhXPzogbnVtYmVyO1xyXG4gICAgQElucHV0KCkgbWF4SD86IG51bWJlcjtcclxuXHJcbiAgICAvKiogQ1NTIHRyYW5zaXRpb24gc3R5bGUuIE5vdGUgdGhhdCBmb3IgbW9yZSBwZXJmb3JtYW5jZSBpcyBwcmVmZXJhYmxlIG9ubHkgbWFrZSB0cmFuc2l0aW9uIG9uIHRyYW5zZm9ybSBwcm9wZXJ0eS4gKi9cclxuICAgIEBJbnB1dCgpIHRyYW5zaXRpb246IHN0cmluZyA9ICd0cmFuc2Zvcm0gNTAwbXMgZWFzZSwgd2lkdGggNTAwbXMgZWFzZSwgaGVpZ2h0IDUwMG1zIGVhc2UnO1xyXG5cclxuICAgIGRyYWdTdGFydCQ6IE9ic2VydmFibGU8TW91c2VFdmVudCB8IFRvdWNoRXZlbnQ+O1xyXG4gICAgcmVzaXplU3RhcnQkOiBPYnNlcnZhYmxlPE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50PjtcclxuXHJcbiAgICAvKiogSWQgb2YgdGhlIGdyaWQgaXRlbS4gVGhpcyBwcm9wZXJ0eSBpcyBzdHJpY3RseSBjb21wdWxzb3J5LiAqL1xyXG4gICAgQElucHV0KClcclxuICAgIGdldCBpZCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgaWQodmFsOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9pZCA9IHZhbDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9pZDogc3RyaW5nO1xyXG5cclxuICAgIC8qKiBNaW5pbXVtIGFtb3VudCBvZiBwaXhlbHMgdGhhdCB0aGUgdXNlciBzaG91bGQgbW92ZSBiZWZvcmUgaXQgc3RhcnRzIHRoZSBkcmFnIHNlcXVlbmNlLiAqL1xyXG4gICAgQElucHV0KClcclxuICAgIGdldCBkcmFnU3RhcnRUaHJlc2hvbGQoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX2RyYWdTdGFydFRocmVzaG9sZDsgfVxyXG5cclxuICAgIHNldCBkcmFnU3RhcnRUaHJlc2hvbGQodmFsOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9kcmFnU3RhcnRUaHJlc2hvbGQgPSBjb2VyY2VOdW1iZXJQcm9wZXJ0eSh2YWwpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2RyYWdTdGFydFRocmVzaG9sZDogbnVtYmVyID0gMDtcclxuXHJcblxyXG4gICAgLyoqIFdoZXRoZXIgdGhlIGl0ZW0gaXMgZHJhZ2dhYmxlIG9yIG5vdC4gRGVmYXVsdHMgdG8gdHJ1ZS4gKi9cclxuICAgIEBJbnB1dCgpXHJcbiAgICBnZXQgZHJhZ2dhYmxlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kcmFnZ2FibGU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGRyYWdnYWJsZSh2YWw6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9kcmFnZ2FibGUgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsKTtcclxuICAgICAgICB0aGlzLl9kcmFnZ2FibGUkLm5leHQodGhpcy5fZHJhZ2dhYmxlKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9kcmFnZ2FibGU6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgcHJpdmF0ZSBfZHJhZ2dhYmxlJDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPih0aGlzLl9kcmFnZ2FibGUpO1xyXG5cclxuICAgIC8qKiBXaGV0aGVyIHRoZSBpdGVtIGlzIHJlc2l6YWJsZSBvciBub3QuIERlZmF1bHRzIHRvIHRydWUuICovXHJcbiAgICBASW5wdXQoKVxyXG4gICAgZ2V0IHJlc2l6YWJsZSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmVzaXphYmxlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCByZXNpemFibGUodmFsOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5fcmVzaXphYmxlID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbCk7XHJcbiAgICAgICAgdGhpcy5fcmVzaXphYmxlJC5uZXh0KHRoaXMuX3Jlc2l6YWJsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfcmVzaXphYmxlOiBib29sZWFuID0gdHJ1ZTtcclxuICAgIHByaXZhdGUgX3Jlc2l6YWJsZSQ6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4odGhpcy5fcmVzaXphYmxlKTtcclxuXHJcbiAgICBwcml2YXRlIGRyYWdTdGFydFN1YmplY3Q6IFN1YmplY3Q8TW91c2VFdmVudCB8IFRvdWNoRXZlbnQ+ID0gbmV3IFN1YmplY3Q8TW91c2VFdmVudCB8IFRvdWNoRXZlbnQ+KCk7XHJcbiAgICBwcml2YXRlIHJlc2l6ZVN0YXJ0U3ViamVjdDogU3ViamVjdDxNb3VzZUV2ZW50IHwgVG91Y2hFdmVudD4gPSBuZXcgU3ViamVjdDxNb3VzZUV2ZW50IHwgVG91Y2hFdmVudD4oKTtcclxuXHJcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbnM6IFN1YnNjcmlwdGlvbltdID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXHJcbiAgICAgICAgICAgICAgICBwcml2YXRlIGdyaWRTZXJ2aWNlOiBLdGRHcmlkU2VydmljZSxcclxuICAgICAgICAgICAgICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcclxuICAgICAgICAgICAgICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmUsXHJcbiAgICAgICAgICAgICAgICBASW5qZWN0KEdSSURfSVRFTV9HRVRfUkVOREVSX0RBVEFfVE9LRU4pIHByaXZhdGUgZ2V0SXRlbVJlbmRlckRhdGE6IEt0ZEdyaWRJdGVtUmVuZGVyRGF0YVRva2VuVHlwZSkge1xyXG4gICAgICAgIHRoaXMuZHJhZ1N0YXJ0JCA9IHRoaXMuZHJhZ1N0YXJ0U3ViamVjdC5hc09ic2VydmFibGUoKTtcclxuICAgICAgICB0aGlzLnJlc2l6ZVN0YXJ0JCA9IHRoaXMucmVzaXplU3RhcnRTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIGNvbnN0IGdyaWRJdGVtUmVuZGVyRGF0YSA9IHRoaXMuZ2V0SXRlbVJlbmRlckRhdGEodGhpcy5pZCkhO1xyXG4gICAgICAgIHRoaXMuc2V0U3R5bGVzKGdyaWRJdGVtUmVuZGVyRGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKFxyXG4gICAgICAgICAgICB0aGlzLl9kcmFnU3RhcnQkKCkuc3Vic2NyaWJlKHRoaXMuZHJhZ1N0YXJ0U3ViamVjdCksXHJcbiAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZVN0YXJ0JCgpLnN1YnNjcmliZSh0aGlzLnJlc2l6ZVN0YXJ0U3ViamVjdCksXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZm9yRWFjaChzdWIgPT4gc3ViLnVuc3Vic2NyaWJlKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFN0eWxlcyh7dG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0fTogeyB0b3A6IHN0cmluZywgbGVmdDogc3RyaW5nLCB3aWR0aD86IHN0cmluZywgaGVpZ2h0Pzogc3RyaW5nIH0pIHtcclxuICAgICAgICAvLyB0cmFuc2Zvcm0gaXMgNnggdGltZXMgZmFzdGVyIHRoYW4gdG9wL2xlZnRcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAndHJhbnNmb3JtJywgYHRyYW5zbGF0ZVgoJHtsZWZ0fSkgdHJhbnNsYXRlWSgke3RvcH0pYCk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2Rpc3BsYXknLCBgYmxvY2tgKTtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAndHJhbnNpdGlvbicsIHRoaXMudHJhbnNpdGlvbik7XHJcbiAgICAgICAgaWYgKHdpZHRoICE9IG51bGwpIHsgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ3dpZHRoJywgd2lkdGgpOyB9XHJcbiAgICAgICAgaWYgKGhlaWdodCAhPSBudWxsKSB7dGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2hlaWdodCcsIGhlaWdodCk7IH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9kcmFnU3RhcnQkKCk6IE9ic2VydmFibGU8TW91c2VFdmVudCB8IFRvdWNoRXZlbnQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZHJhZ2dhYmxlJC5waXBlKFxyXG4gICAgICAgICAgICBzd2l0Y2hNYXAoKGRyYWdnYWJsZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFkcmFnZ2FibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTkVWRVI7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kcmFnSGFuZGxlcy5jaGFuZ2VzLnBpcGUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0V2l0aCh0aGlzLl9kcmFnSGFuZGxlcyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgoZHJhZ0hhbmRsZXM6IFF1ZXJ5TGlzdDxLdGRHcmlkRHJhZ0hhbmRsZT4pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpaWYoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCkgPT4gZHJhZ0hhbmRsZXMubGVuZ3RoID4gMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXJnZSguLi5kcmFnSGFuZGxlcy50b0FycmF5KCkubWFwKGRyYWdIYW5kbGUgPT4ga3RkTW91c2VPclRvdWNoRG93bihkcmFnSGFuZGxlLmVsZW1lbnQubmF0aXZlRWxlbWVudCwgMSkpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrdGRNb3VzZU9yVG91Y2hEb3duKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKS5waXBlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aGF1c3RNYXAoKHN0YXJ0RXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGV2ZW50IHN0YXJ0ZWQgZnJvbSBhbiBlbGVtZW50IHdpdGggdGhlIG5hdGl2ZSBIVE1MIGRyYWcmZHJvcCwgaXQnbGwgaW50ZXJmZXJlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdpdGggb3VyIG93biBkcmFnZ2luZyAoZS5nLiBgaW1nYCB0YWdzIGRvIGl0IGJ5IGRlZmF1bHQpLiBQcmV2ZW50IHRoZSBkZWZhdWx0IGFjdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBzdG9wIGl0IGZyb20gaGFwcGVuaW5nLiBOb3RlIHRoYXQgcHJldmVudGluZyBvbiBgZHJhZ3N0YXJ0YCBhbHNvIHNlZW1zIHRvIHdvcmssIGJ1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpdCdzIGZsYWt5IGFuZCBpdCBmYWlscyBpZiB0aGUgdXNlciBkcmFncyBpdCBhd2F5IHF1aWNrbHkuIEFsc28gbm90ZSB0aGF0IHdlIG9ubHkgd2FudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBkbyB0aGlzIGZvciBgbW91c2Vkb3duYCBzaW5jZSBkb2luZyB0aGUgc2FtZSBmb3IgYHRvdWNoc3RhcnRgIHdpbGwgc3RvcCBhbnkgYGNsaWNrYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBldmVudHMgZnJvbSBmaXJpbmcgb24gdG91Y2ggZGV2aWNlcy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0RXZlbnQudGFyZ2V0ICYmIChzdGFydEV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudCkuZHJhZ2dhYmxlICYmIHN0YXJ0RXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0RXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRQb2ludGVyID0ga3RkUG9pbnRlckNsaWVudChzdGFydEV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZFNlcnZpY2UubW91c2VPclRvdWNoTW92ZSQoZG9jdW1lbnQpLnBpcGUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWtlVW50aWwoa3RkTW91c2VPclRvdWNoRW5kKGRvY3VtZW50LCAxKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrdGRPdXRzaWRlWm9uZSh0aGlzLm5nWm9uZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIoKG1vdmVFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vdmVQb2ludGVyID0ga3RkUG9pbnRlckNsaWVudChtb3ZlRXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlWCA9IE1hdGguYWJzKHN0YXJ0UG9pbnRlci5jbGllbnRYIC0gbW92ZVBvaW50ZXIuY2xpZW50WCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlzdGFuY2VZID0gTWF0aC5hYnMoc3RhcnRQb2ludGVyLmNsaWVudFkgLSBtb3ZlUG9pbnRlci5jbGllbnRZKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHRoaXMgY29uZGl0aW9ucyByZXR1cm5zIHRydWUgbWVhbiB0aGF0IHdlIGFyZSBvdmVyIHRocmVzaG9sZC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGlzdGFuY2VYICsgZGlzdGFuY2VZID49IHRoaXMuZHJhZ1N0YXJ0VGhyZXNob2xkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWtlKDEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBvcmlnaW5hbCBzdGFydCBldmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwKCgpID0+IHN0YXJ0RXZlbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3Jlc2l6ZVN0YXJ0JCgpOiBPYnNlcnZhYmxlPE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc2l6YWJsZSQucGlwZShcclxuICAgICAgICAgICAgc3dpdGNoTWFwKChyZXNpemFibGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghcmVzaXphYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2lkZSBlZmZlY3QgdG8gaGlkZSB0aGUgcmVzaXplRWxlbSBpZiByZXNpemUgaXMgZGlzYWJsZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLnJlc2l6ZUVsZW0ubmF0aXZlRWxlbWVudCwgJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBORVZFUjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc2l6ZUhhbmRsZXMuY2hhbmdlcy5waXBlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydFdpdGgodGhpcy5fcmVzaXplSGFuZGxlcyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgocmVzaXplSGFuZGxlczogUXVlcnlMaXN0PEt0ZEdyaWRSZXNpemVIYW5kbGU+KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzaXplSGFuZGxlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2lkZSBlZmZlY3QgdG8gaGlkZSB0aGUgcmVzaXplRWxlbSBpZiB0aGVyZSBhcmUgcmVzaXplIGhhbmRsZXMuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLnJlc2l6ZUVsZW0ubmF0aXZlRWxlbWVudCwgJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtZXJnZSguLi5yZXNpemVIYW5kbGVzLnRvQXJyYXkoKS5tYXAocmVzaXplSGFuZGxlID0+IGt0ZE1vdXNlT3JUb3VjaERvd24ocmVzaXplSGFuZGxlLmVsZW1lbnQubmF0aXZlRWxlbWVudCwgMSkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLnJlc2l6ZUVsZW0ubmF0aXZlRWxlbWVudCwgJ2Rpc3BsYXknLCAnYmxvY2snKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ga3RkTW91c2VPclRvdWNoRG93bih0aGlzLnJlc2l6ZUVsZW0ubmF0aXZlRWxlbWVudCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9taW5XOiBOdW1iZXJJbnB1dDtcclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxyXG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX21pbkg6IE51bWJlcklucHV0O1xyXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfbWF4VzogTnVtYmVySW5wdXQ7XHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9tYXhIOiBOdW1iZXJJbnB1dDtcclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxyXG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX2RyYWdnYWJsZTogQm9vbGVhbklucHV0O1xyXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfcmVzaXphYmxlOiBCb29sZWFuSW5wdXQ7XHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9kcmFnU3RhcnRUaHJlc2hvbGQ6IE51bWJlcklucHV0O1xyXG5cclxufVxyXG4iLCI8bmctY29udGVudD48L25nLWNvbnRlbnQ+XHJcbjxkaXYgI3Jlc2l6ZUVsZW0gY2xhc3M9XCJncmlkLWl0ZW0tcmVzaXplLWljb25cIj48L2Rpdj5cclxuIl19